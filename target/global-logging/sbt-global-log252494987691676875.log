[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\telmo\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\telmo\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.8 (Oracle Corporation Java 21.0.2)
[debug] Load.defaultLoad until apply took 256.9272ms
[debug]           Load.loadUnit: plugins took 114.4464ms
[debug]           Load.loadUnit: defsScala took 0.621ms
[debug] [Loading] Scanning directory C:\Users\telmo\Desktop\Dissertation\APIGenMPST\project
[debug]             Load.loadUnit: mkEval took 7.9496ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\telmo\Desktop\Dissertation\APIGenMPST\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 15.2259 ms
[info] loading settings for project apigenmpst-build from plugins.sbt,idea.sbt ...
[debug]               Load.resolveProject(apigenmpst-build) took 45.9889ms
[debug]             Load.loadTransitive: finalizeProject(Project(id apigenmpst-build, base: C:\Users\telmo\Desktop\Dissertation\APIGenMPST\project, plugins: List(<none>))) took 68.8378ms
[debug] [Loading] Done in C:\Users\telmo\Desktop\Dissertation\APIGenMPST\project, returning: (apigenmpst-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3750.5764ms
[debug]           Load.loadUnit: cleanEvalClasses took 10.6458ms
[debug]         Load.loadUnit(file:/C:/Users/telmo/Desktop/Dissertation/APIGenMPST/project/, ...) took 3886.376ms
[debug]       Load.apply: load took 4089.2594ms
[debug]       Load.apply: resolveProjects took 8.5131ms
[debug]       Load.apply: finalTransforms took 106.4539ms
[debug]       Load.apply: config.delegates took 11.5045ms
[debug]       Load.apply: Def.make(settings)... took 724.3684ms
[debug]       Load.apply: structureIndex took 182.1398ms
[debug]       Load.apply: mkStreams took 5.7407ms
[info] loading project definition from C:\Users\telmo\Desktop\Dissertation\APIGenMPST\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 7545.4868ms
[debug]     Load.loadUnit: defsScala took 0.0036ms
[debug] [Loading] Scanning directory C:\Users\telmo\Desktop\Dissertation\APIGenMPST
[debug]       Load.loadUnit: mkEval took 0.223ms
[debug] [Loading] Found root project APIGenMPSTBuild w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(org.scalajs.sbtplugin.ScalaJSPlugin), Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.scalajs.sbtplugin.ScalaJSPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.portablescala.sbtplatformdeps.PlatformDepsPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.portablescala.sbtplatformdeps.PlatformDepsPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,org.scalajs.sbtplugin.ScalaJSPlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,org.portablescala.sbtplatformdeps.PlatformDepsPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 7.044 ms
[info] loading settings for project APIGenMPSTBuild from build.sbt ...
[debug]         Load.resolveProject(APIGenMPSTBuild) took 49.6128ms
[debug]       Load.loadTransitive: finalizeProject(Project(id APIGenMPSTBuild, base: C:\Users\telmo\Desktop\Dissertation\APIGenMPST, plugins: List(org.scalajs.sbtplugin.ScalaJSPlugin))) took 58.1584ms
[debug] [Loading] Done in C:\Users\telmo\Desktop\Dissertation\APIGenMPST, returning: (APIGenMPSTBuild)
[debug]     Load.loadUnit: loadedProjectsRaw took 1093.8568ms
[debug]     Load.loadUnit: cleanEvalClasses took 4.7419ms
[debug]   Load.loadUnit(file:/C:/Users/telmo/Desktop/Dissertation/APIGenMPST/, ...) took 8646.152ms
[debug] Load.apply: load took 8698.7111ms
[debug] Load.apply: resolveProjects took 0.1736ms
[debug] Load.apply: finalTransforms took 27.3127ms
[debug] Load.apply: config.delegates took 0.4823ms
[debug] Load.apply: Def.make(settings)... took 112.5575ms
[debug] Load.apply: structureIndex took 33.0961ms
[debug] Load.apply: mkStreams took 0.0057ms
[info] set current project to APIGenMPST (in build file:/C:/Users/telmo/Desktop/Dissertation/APIGenMPST/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51288 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51288, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to APIGenMPST (in build file:/C:/Users/telmo/Desktop/Dissertation/APIGenMPST/)
[debug] > Exec(idea-shell, None, None)
