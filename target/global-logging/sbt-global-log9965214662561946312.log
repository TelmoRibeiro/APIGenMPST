[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\telmo\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\telmo\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.7 (Oracle Corporation Java 17.0.7)
[debug]       Load.loadUnit: plugins took 158.4764ms
[debug]       Load.loadUnit: defsScala took 0.5085ms
[debug] [Loading] Scanning directory C:\Users\telmo\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\telmo\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 21.3467 ms
[debug]           Load.resolveProject(global-plugins) took 43.8693ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\telmo\.sbt\1.0\plugins, plugins: List(<none>))) took 89.2856ms
[debug] [Loading] Done in C:\Users\telmo\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 118.9629ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.247ms
[debug]     Load.loadUnit(file:/C:/Users/telmo/.sbt/1.0/plugins/, ...) took 290.7714ms
[debug]   Load.apply: load took 474.0256ms
[debug]   Load.apply: resolveProjects took 4.6202ms
[debug]   Load.apply: finalTransforms took 52.5174ms
[debug]   Load.apply: config.delegates took 11.2312ms
[debug]   Load.apply: Def.make(settings)... took 480.1218ms
[debug]   Load.apply: structureIndex took 158.2134ms
[debug]   Load.apply: mkStreams took 5.3807ms
[info] loading global plugins from C:\Users\telmo\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2669.5652ms
[debug]           Load.loadUnit: plugins took 19.0499ms
[debug]           Load.loadUnit: defsScala took 0.0034ms
[debug] [Loading] Scanning directory C:\Users\telmo\OneDrive\Desktop\APIGenMPST\project
[debug]             Load.loadUnit: mkEval took 4.2054ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\telmo\OneDrive\Desktop\APIGenMPST\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.5171 ms
[info] loading settings for project apigenmpst-build from idea1.sbt ...
[debug]               Load.resolveProject(apigenmpst-build) took 2.0263ms
[debug]             Load.loadTransitive: finalizeProject(Project(id apigenmpst-build, base: C:\Users\telmo\OneDrive\Desktop\APIGenMPST\project, plugins: List(<none>))) took 3.9518ms
[debug] [Loading] Done in C:\Users\telmo\OneDrive\Desktop\APIGenMPST\project, returning: (apigenmpst-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 107.3942ms
[debug]           Load.loadUnit: cleanEvalClasses took 5.0228ms
[debug]         Load.loadUnit(file:/C:/Users/telmo/OneDrive/Desktop/APIGenMPST/project/, ...) took 132.2796ms
[debug]       Load.apply: load took 133.9209ms
[debug]       Load.apply: resolveProjects took 0.1128ms
[debug]       Load.apply: finalTransforms took 10.3404ms
[debug]       Load.apply: config.delegates took 0.5637ms
[debug]       Load.apply: Def.make(settings)... took 74.8613ms
[debug]       Load.apply: structureIndex took 27.2258ms
[debug]       Load.apply: mkStreams took 0.0044ms
[info] loading project definition from C:\Users\telmo\OneDrive\Desktop\APIGenMPST\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 1320.2286ms
[debug]     Load.loadUnit: defsScala took 0.003ms
[debug] [Loading] Scanning directory C:\Users\telmo\OneDrive\Desktop\APIGenMPST
[debug]       Load.loadUnit: mkEval took 0.3366ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.4175 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 88.8026ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\telmo\OneDrive\Desktop\APIGenMPST, plugins: List(<none>))) took 92.4431ms
[debug] [Loading] Done in C:\Users\telmo\OneDrive\Desktop\APIGenMPST, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 2916.8677ms
[debug]     Load.loadUnit: cleanEvalClasses took 13.902ms
[debug]   Load.loadUnit(file:/C:/Users/telmo/OneDrive/Desktop/APIGenMPST/, ...) took 4252.4029ms
[debug] Load.apply: load took 4254.3752ms
[debug] Load.apply: resolveProjects took 0.194ms
[debug] Load.apply: finalTransforms took 30.9066ms
[debug] Load.apply: config.delegates took 0.3774ms
[debug] Load.apply: Def.make(settings)... took 71.157ms
[debug] Load.apply: structureIndex took 22.0706ms
[debug] Load.apply: mkStreams took 0.003ms
[info] set current project to APIGenMPST (in build file:/C:/Users/telmo/OneDrive/Desktop/APIGenMPST/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 57154 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 57154, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to APIGenMPST (in build file:/C:/Users/telmo/OneDrive/Desktop/APIGenMPST/)
[debug] > Exec(idea-shell, None, None)
